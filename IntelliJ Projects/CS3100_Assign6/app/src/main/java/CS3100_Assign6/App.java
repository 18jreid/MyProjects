/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package CS3100_Assign6;

import java.util.concurrent.Executors;

public class App {
    private static final int MAX_PAGE_REFERENCE = 250;

    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        // Test Page Replacement Schemes from given functions.
        System.out.println("FIFO TEST");
        testFIFO();
        System.out.println("\nLRU TEST");
        testLRU();
        System.out.println("\nMRU TEST");
        testMRU();

        long startTime = System.nanoTime();
        System.out.println();
        int[] fifoFaults = new int[1000];
        for (int i = 0; i < 1000; i++) {
            int[] sequence = sequenceGenerator();
            int[] pageFaults = new int[101];

            for (int frameCounter = 1; frameCounter <= 100; frameCounter++) {
                TaskLRU task = new TaskLRU(sequence, frameCounter, MAX_PAGE_REFERENCE, pageFaults);
                task.run();
            }

            int totalFaults = 0;
            for (int num : pageFaults) {
                totalFaults += num;
            }
            fifoFaults[i] = totalFaults;
        }

        int min = 1000000;
        for (int num : fifoFaults) {
            if (num < min) {
                min = num;
            }
        }
        System.out.println("FIFO Min pf: " + min);

        int[] lruFaults = new int[1000];
        for (int i = 0; i < 1000; i++) {
            int[] sequence = sequenceGenerator();
            int[] pageFaults = new int[101];

            for (int frameCounter = 1; frameCounter <= 100; frameCounter++) {
                TaskLRU task = new TaskLRU(sequence, frameCounter, MAX_PAGE_REFERENCE, pageFaults);
                task.run();
            }

            int totalFaults = 0;
            for (int num : pageFaults) {
                totalFaults += num;
            }
            lruFaults[i] = totalFaults;
        }

        min = 1000000;
        for (int num : lruFaults) {
            if (num < min) {
                min = num;
            }
        }
        System.out.println("LRU Min pf: " + min);

        int[] mruFaults = new int[1000];
        for (int i = 0; i < 1000; i++) {
            int[] sequence = sequenceGenerator();
            int[] pageFaults = new int[101];

            for (int frameCounter = 1; frameCounter <= 100; frameCounter++) {
                TaskLRU task = new TaskLRU(sequence, frameCounter, MAX_PAGE_REFERENCE, pageFaults);
                task.run();
            }

            int totalFaults = 0;
            for (int num : pageFaults) {
                totalFaults += num;
            }
            mruFaults[i] = totalFaults;
        }

        min = 1000000;
        for (int num : mruFaults) {
            if (num < min) {
                min = num;
            }
        }
        System.out.println("MRU Min pf: " + min);
        long endTime = System.nanoTime();
        long totalTime = endTime - startTime;
        System.out.println("Total Time: " + (totalTime / 1000000) + "ms");
    }

    public static void testFIFO() {
        int[] sequence1 = {1, 2, 3, 4, 5, 6, 7, 8, 9};
        int[] sequence2 = {1, 2, 1, 3, 2, 1, 2, 3, 4};
        int[] pageFaults = new int[4];  // 4 because maxMemoryFrames is 3

        // Replacement should be: 1, 2, 3, 4, 5, 6, 7, 8
        // Page Faults should be 9
        (new TaskFIFO(sequence1, 1, MAX_PAGE_REFERENCE, pageFaults)).run();
        System.out.printf("Page Faults: %d\n", pageFaults[1]);

        // Replacement should be: 1, 2, 3, 1, 2
        // Page Faults should be 7
        (new TaskFIFO(sequence2, 2, MAX_PAGE_REFERENCE, pageFaults)).run();
        System.out.printf("Page Faults: %d\n", pageFaults[2]);

        // Replacement should be: 1
        // Page Faults should be 4
        (new TaskFIFO(sequence2, 3, MAX_PAGE_REFERENCE, pageFaults)).run();
        System.out.printf("Page Faults: %d\n", pageFaults[3]);
    }

    public static void testLRU() {
        int[] sequence1 = {1, 2, 3, 4, 5, 6, 7, 8, 9};
        int[] sequence2 = {1, 2, 1, 3, 2, 1, 2, 3, 4};
        int[] pageFaults = new int[4];  // 4 because maxMemoryFrames is 3

        // Replacement should be: 1, 2, 3, 4, 5, 6, 7, 8
        // Page Faults should be 9
        (new TaskLRU(sequence1, 1, MAX_PAGE_REFERENCE, pageFaults)).run();
        System.out.printf("Page Faults: %d\n", pageFaults[1]);

        // Replacement should be: 2, 1, 3, 1, 2
        // Page Faults should be 7
        (new TaskLRU(sequence2, 2, MAX_PAGE_REFERENCE, pageFaults)).run();
        System.out.printf("Page Faults: %d\n", pageFaults[2]);

        // Replacement should be: 1
        // Page Faults should be 4
        (new TaskLRU(sequence2, 3, MAX_PAGE_REFERENCE, pageFaults)).run();
        System.out.printf("Page Faults: %d\n", pageFaults[3]);
    }

    public static void testMRU() {
        int[] sequence1 = {1, 2, 3, 4, 5, 6, 7, 8, 9};
        int[] sequence2 = {1, 2, 1, 3, 2, 1, 2, 3, 4};
        int[] pageFaults = new int[4];  // 4 because maxMemoryFrames is 3

        // Replacement should be: 1, 2, 3, 4, 5, 6, 7, 8
        // Page Faults should be 9
        (new TaskMRU(sequence1, 1, MAX_PAGE_REFERENCE, pageFaults)).run();
        System.out.printf("Page Faults: %d\n", pageFaults[1]);

        // Replacement should be: 1, 2, 1, 3
        // Page Faults should be 6
        (new TaskMRU(sequence2, 2, MAX_PAGE_REFERENCE, pageFaults)).run();
        System.out.printf("Page Faults: %d\n", pageFaults[2]);

        // Replacement should be: 3
        // Page Faults should be 4
        (new TaskMRU(sequence2, 3, MAX_PAGE_REFERENCE, pageFaults)).run();
        System.out.printf("Page Faults: %d\n", pageFaults[3]);
    }

    private static int[] sequenceGenerator() {
        int[] sequence = new int[1000];

        for (int i = 0; i < sequence.length; i++) {
            sequence[i] = (int) ((Math.random() * (250 - 1)) + 1);
        }

        return sequence;
    }
}
